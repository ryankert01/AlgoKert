import{_ as e,o as a,c as r,a as t}from"./app.14874db8.js";const p=JSON.parse('{"title":"Red Black Tree","description":"","frontmatter":{},"headers":[{"level":2,"title":"Defination","slug":"defination","link":"#defination","children":[{"level":3,"title":"Red or Black ?","slug":"red-or-black","link":"#red-or-black","children":[]},{"level":3,"title":"insert","slug":"insert","link":"#insert","children":[]}]}],"relativePath":"Tree/red-black.md","lastUpdated":1683806362000}'),n={name:"Tree/red-black.md"},l=t('<h1 id="red-black-tree" tabindex="-1">Red Black Tree <a class="header-anchor" href="#red-black-tree" aria-hidden="true">#</a></h1><h2 id="defination" tabindex="-1">Defination <a class="header-anchor" href="#defination" aria-hidden="true">#</a></h2><p>A red-black tree is a binary tree that connect leaf with external node rather than <code>nullptr</code>.</p><h3 id="red-or-black" tabindex="-1">Red or Black ? <a class="header-anchor" href="#red-or-black" aria-hidden="true">#</a></h3><ol><li>The root and all external nodes are colored Black</li><li>No root to external node path has two consecutive red nodes</li><li>All root-to-external node path have same number of black nodes.</li></ol><h3 id="insert" tabindex="-1">insert <a class="header-anchor" href="#insert" aria-hidden="true">#</a></h3>',6),d=[l];function i(o,c,s,h,_,k){return a(),r("div",null,d)}const b=e(n,[["render",i]]);export{p as __pageData,b as default};
