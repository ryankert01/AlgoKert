import{_ as a,c as t,b as s,d as l,t as n,a as i,o as r}from"./app.77277f3b.js";const f=JSON.parse('{"title":"Split Array into Consecutive Subsequences","description":"leetcode 659. Split Array into Consecutive Subsequences","frontmatter":{"title":"Split Array into Consecutive Subsequences","editLink":true,"description":"leetcode 659. Split Array into Consecutive Subsequences","problem_url":"https://leetcode.com/problems/split-array-into-consecutive-subsequences/"},"headers":[{"level":2,"title":"Intuition","slug":"intuition"},{"level":2,"title":"Code","slug":"code"},{"level":2,"title":"Complexity Analysis","slug":"complexity-analysis"}],"relativePath":"hash-table/659.md","lastUpdated":1660890811000}'),o={name:"hash-table/659.md"},p={id:"frontmatter-title",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),u={href:"{{ $frontmatter.problem_url }}",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="intuition" tabindex="-1">Intuition <a class="header-anchor" href="#intuition" aria-hidden="true">#</a></h2><p>Store how many time a <code>num+1000</code> exist in <code>nums</code>. We know that to form a vaild subsequence it has to be three nums, so if there&#39;re possibly a new sequence, we add it to <code>queue</code>. If there should be one or multiple subsequence going to end, check if it contains three elements, otherwise return <code>false</code>.</p><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">bool isPossible(vector&lt;int&gt;&amp; nums) {</span></span>
<span class="line"><span style="color:#A6ACCD;">	vector&lt;int&gt; sub(3000, false);</span></span>
<span class="line"><span style="color:#A6ACCD;">	for(int i : nums) sub[i+1000]++;</span></span>
<span class="line"><span style="color:#A6ACCD;">	int count = 0, last = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">	queue&lt;int&gt; q;</span></span>
<span class="line"><span style="color:#A6ACCD;">	for(int i = 0; i &lt; 2004; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">		while (sub[i] &gt; q.size()) q.push(i);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">		while (sub[i] &lt; q.size()) {</span></span>
<span class="line"><span style="color:#A6ACCD;">			if(q.front()+2 &lt; i) q.pop();</span></span>
<span class="line"><span style="color:#A6ACCD;">			else return false;</span></span>
<span class="line"><span style="color:#A6ACCD;">		}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	return true;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="complexity-analysis" tabindex="-1">Complexity Analysis <a class="header-anchor" href="#complexity-analysis" aria-hidden="true">#</a></h2><p><strong>Time:</strong> <code>O(n)</code><strong>Space:</strong> <code>O(n)</code></p>`,6);function b(e,m,h,C,A,y){return r(),t("div",null,[s("h1",p,[l(n(e.$frontmatter.title)+" ",1),c]),s("p",null,[s("a",u,n(e.$frontmatter.description),1)]),d])}const D=a(o,[["render",b]]);export{f as __pageData,D as default};
