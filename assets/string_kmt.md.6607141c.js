import{_ as e,o as l,c as p,b as s,d as o,t as a,a as t}from"./app.06f28c79.js";const A=JSON.parse('{"title":"KMP Algorithm","description":"leetcode 1910. Remove All Occurrences of a Substring","frontmatter":{"title":"KMP Algorithm","editLink":true,"description":"leetcode 1910. Remove All Occurrences of a Substring","problem_url":"https://leetcode.com/problems/remove-all-occurrences-of-a-substring/"},"headers":[{"level":2,"title":"Intuition","slug":"intuition"},{"level":2,"title":"Explanation","slug":"explanation"},{"level":2,"title":"Code","slug":"code"},{"level":2,"title":"Complexity Analysis","slug":"complexity-analysis"}],"relativePath":"string/kmt.md","lastUpdated":1660895247000}'),r={name:"string/kmt.md"},c={id:"frontmatter-title",tabindex:"-1"},i=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y={href:"{{ $frontmatter.problem_url }}",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="intuition" tabindex="-1">Intuition <a class="header-anchor" href="#intuition" aria-hidden="true">#</a></h2><p>Hey, want to find a substring that matches some sort of pattern string? In some naive solution, it takes <code>O(n*m)</code> time. Using KMP, we can minimize that to <code>O(n+m)</code>, linear time. That&#39;s the power of KMP.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><p>Assume that we want to find <code>p</code> in <code>s</code>. Look at this match:</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">s = &quot;aaaaaaaab&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">p = &quot;aab&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Why don&#39;t we just skip those annoying <code>a</code>s, and reach <code>&quot;aab&quot;</code> faster.</p><p>How might we be able to achieve that?</p><p><strong>Attemp to go linear time</strong></p><p>What is stopping us from achieving linear time complexity?</p><p>look at my attemp to go linear time:</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">s = &quot;abababc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">p = &quot;ababc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Explain:</span></span>
<span class="line"><span style="color:#A6ACCD;">First Not match:</span></span>
<span class="line"><span style="color:#A6ACCD;">    index: 4</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;a&quot; != &quot;c&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">restart:</span></span>
<span class="line"><span style="color:#A6ACCD;">    remaining &quot;abc&quot; != &quot;ababc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    return -1; (doesn&#39;t exist)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>It&#39;s definitly not the answer, right?</p><p>You might already see that the problem is that we have already count &quot;ab&quot; we need at <code>First not match</code>.</p><p><strong>Introducing LPS</strong></p><p>One main idea of this algorithm is LPS, and it&#39;s all about if its not matching we can jump back to not the beginning, but the position it should at.</p><p>For Example, at last example, if will point to &quot;c&quot; when <code>First Not match</code> occurs. Which is totally correct since there&#39;s already &quot;abab&quot; at the front.</p><p><strong>build</strong></p><p>lps is all about if mismatched, pointer should point back to what position.</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">p = &quot;ababc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">lps = &quot;000120&quot; // index 0 is set to 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>One concise approach to construct lps:</p><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lps</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">();)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">lps</span><span style="color:#89DDFF;">[++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        i </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lps</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-hidden="true">#</a></h2><p>/_ your code ac in oj _/</p><h2 id="complexity-analysis" tabindex="-1">Complexity Analysis <a class="header-anchor" href="#complexity-analysis" aria-hidden="true">#</a></h2><p><strong>Time:</strong> <code>O()</code><strong>Space:</strong> <code>O()</code></p>`,25);function u(n,F,D,b,m,h){return l(),p("div",null,[s("h1",c,[o(a(n.$frontmatter.title)+" ",1),i]),s("p",null,[s("a",y,a(n.$frontmatter.description),1)]),d])}const g=e(r,[["render",u]]);export{A as __pageData,g as default};
